package com.spring.rubrica.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spring.rubrica.dao.DAORubrica;
import com.spring.rubrica.dto.ContattoDTO;
import com.spring.rubrica.dto.ContattoNomeCognomeDTO;
import com.spring.rubrica.dto.ContattoNoIdDTO;
import com.spring.rubrica.entity.Contatto;
import com.spring.rubrica.entity.Rubrica;
import com.spring.rubrica.utility.Conversioni;

@Service
public class ContattoServiceImpl implements ContattoService {

	@Autowired
	DAORubrica dao;

	public boolean inserisciContatto(int idRubrica, ContattoDTO dto) {
		Rubrica rubrica = dao.selectById(idRubrica);
		Contatto contatto = Conversioni.daContattoDTOAContatto(dto);
		if (rubrica.getContatti().containsKey(contatto.getId())) {
			return false;
		}
		rubrica.getContatti().put(contatto.getId(), contatto);
		return true;
	}

	public ContattoDTO visualizzaContatto(int idRubrica, int id) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ContattoDTO dto = new ContattoDTO();
		if (rubrica != null) {
			Contatto contatto = rubrica.getContatti().get(id);
			if (contatto != null) {
				dto = Conversioni.daContattoAContattoDTO(contatto);

			} else {
				throw new RuntimeException("Impossibile visualizzare il contatto.Id contatto non trovato");
			}
		}
		return dto;
	}

	public ContattoDTO modifica(int idRubrica, int id, ContattoNoIdDTO dto) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ContattoDTO dtoo = new ContattoDTO();
		if (rubrica != null) {
			Contatto contatto = rubrica.getContatti().get(id);
			if (contatto != null) {
				contatto.setNome(dto.getNome());
				contatto.setCognome(dto.getCognome());
				contatto.setNumero(dto.getNumero());
				contatto.setGruppo_appartenenza(dto.getGruppo_appartenenza());
				contatto.setData_nascita(dto.getData_nascita());
				contatto.setPreferito(dto.isPreferito());

				rubrica.getContatti().put(id, contatto);
				dtoo = Conversioni.daContattoAContattoDTO(contatto);

			} else {
				throw new RuntimeException("Impossibile modificare il contatto.Id contatto non trovato");
			}
		}
		return dtoo;
	}

	public ContattoDTO cancella(int idRubrica, int id) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ContattoDTO dto = null;
		if (rubrica != null) {
			Contatto contatto = rubrica.getContatti().get(id);
			if (contatto != null) {
				rubrica.getContatti().remove(id, contatto);
				dto = Conversioni.daContattoAContattoDTO(contatto);

			} else {
				throw new RuntimeException("Impossibile eliminare il contatto .Id non trovato");
			}
		}
		return dto;
	}

	public List<ContattoDTO> listaContatti(int idRubrica) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ArrayList<ContattoDTO> contattiDto = new ArrayList<>();
		if (rubrica != null) {
			ArrayList<Contatto> contatti = new ArrayList<>(rubrica.getContatti().values());

			for (Contatto contatto : contatti) {
				ContattoDTO dto = Conversioni.daContattoAContattoDTO(contatto);
				if (contatto != null) {
					contattiDto.add(dto);
				}
				throw new RuntimeException("Lista contatti non disponiv√¨bile.Contatto non trovato");
			}
		}
		return contattiDto;
	}

	public Integer NumeroContatti(int idRubrica) {
		Rubrica rubrica = dao.selectById(idRubrica);
		int dimensione = 0;
		if (rubrica != null) {
			dimensione = rubrica.getContatti().size();
		}
		return dimensione;
	}

	public ContattoDTO VisualizzaConNumero(int idRubrica, int numero) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ContattoDTO dto = new ContattoDTO();
		if (rubrica != null) {
			for (Contatto contatto : rubrica.getContatti().values()) {
				if (contatto != null) {
					if (contatto.getNumero() == numero) {
						dto = Conversioni.daContattoAContattoDTO(contatto);
					}
				}
				throw new RuntimeException("Impossibile visualizzare contatto con il numero.Contatto non trovato");
			}
		}
		return dto;
	}

	public ContattoNomeCognomeDTO VisualizzaConGruppo(int idRubrica, String gruppo) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ContattoNomeCognomeDTO NomeCognomeDto = null;
		if (rubrica != null) {
			for (Contatto contatto : rubrica.getContatti().values()) {
				if (contatto != null) {
					if (contatto.getGruppo_appartenenza().equals(gruppo)) {
						ContattoDTO dto = Conversioni.daContattoAContattoDTO(contatto);
						NomeCognomeDto = new ContattoNomeCognomeDTO(dto.getNome(), dto.getCognome());
					}
				} else {
					throw new RuntimeException(
							"Impossibile visualizzare contatto con il gruppo di appartenenza.Contatto non trovato");
				}
			}
		}
		return NomeCognomeDto;
	}

	public Integer NumeroContattiGruppo(int idRubrica, String gruppo) {
		ArrayList<Contatto> contatti = new ArrayList<Contatto>();
		Rubrica rubrica = dao.selectById(idRubrica);
		if (rubrica != null) {
			for (Contatto contatto : rubrica.getContatti().values()) {
				if (contatto.getGruppo_appartenenza().equals(gruppo)) {
					contatti.add(contatto);
				}
			}
		}
		return contatti.size();
	}

	public List<ContattoDTO> CancellaGruppoContatti(int idRubrica, String gruppo) {
		ArrayList<ContattoDTO> contatti = new ArrayList<ContattoDTO>();
		Rubrica rubrica = dao.selectById(idRubrica);
		if (rubrica != null) {
			for (Contatto contatto : rubrica.getContatti().values()) {
				if (contatti != null) {
					if (contatto.getGruppo_appartenenza().equals(gruppo)) {
						ContattoDTO dto = Conversioni.daContattoAContattoDTO(contatto);
						rubrica.getContatti().remove(contatto.getId(), contatto);
						contatti.add(dto);
					}
				} else {
					throw new RuntimeException(
							"Impossibile visualizzare la lista di contatti du un gruppo di appartenenza.Contatto non trovato");
				}
			}
		}
		return contatti;
	}

	public ContattoDTO modificaStatoPreferito(int idRubrica, int id) {
		Rubrica rubrica = dao.selectById(idRubrica);
		ContattoDTO dto = new ContattoDTO();
		if (rubrica != null) {
			Contatto contatto = rubrica.getContatti().get(id);
			if (contatto != null) {
				dto = Conversioni.daContattoAContattoDTO(contatto);
				dto.setPreferito(true);
			} else {
				throw new RuntimeException("Impossibile modificare lo stato preferito del contatto.Contatto non trovato");
			}
		}
		return dto;

	}

	public List<ContattoDTO> ContattiPreferiti(int idRubrica) {
		ArrayList<ContattoDTO> preferiti = new ArrayList<ContattoDTO>();
		Rubrica rubrica = dao.selectById(idRubrica);
		if (rubrica != null) {
			for (Contatto contatto : rubrica.getContatti().values()) {
				ContattoDTO dto = Conversioni.daContattoAContattoDTO(contatto);
				if (dto.isPreferito() == true) {
					preferiti.add(dto);
				}

			}
			return preferiti;
		}
		throw new RuntimeException("Id rubrica non trovato");
	}

}