package com.spring.ecommerce.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spring.ecommerce.dao.DAOVenditore;
import com.spring.ecommerce.dto.ProdottoDTO;
import com.spring.ecommerce.dto.VenditoreDTO;
import com.spring.ecommerce.dto.VenditoreDTONOProdotti;
import com.spring.ecommerce.entity.Prodotto;
import com.spring.ecommerce.entity.Venditore;
import com.spring.ecommerce.utility.Conversioni;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class ServiceVenditoreImpl implements ServiceVenditore {

	@Autowired
	DAOVenditore dao;

	@Override
    public boolean inserisci(VenditoreDTO dto) {
        Optional<Venditore> opt = dao.findById(dto.getId());
        if(opt.isPresent()) {
            return false;
        } else {
            Venditore venditore = Conversioni.daVenditoreDTOAVenditore(dto);
            dao.save(venditore);
            return true;
        }
    }

	@Override
	public VenditoreDTO cerca(int idVenditore) {
		Optional<Venditore> opt = dao.findById(idVenditore);
		if (opt.isPresent()) {
			Venditore venditore = opt.get();
			return Conversioni.daVenditoreAVenditoreDTO(venditore);
		}
		throw new RuntimeException("Venditore non trovato.ID non valido");
	}

	@Override
	public VenditoreDTONOProdotti visualizzaSenzaProdotti(int idVenditore) {
		Optional<Venditore> opt = dao.findById(idVenditore);
		if (opt.isPresent()) {
			Venditore ven = opt.get();
			return new VenditoreDTONOProdotti(ven.getId(), ven.getNome(), ven.getCognome(), ven.getUsername(), ven.getPassword(), ven.getVia(), ven.getCitta());
		}
		throw new RuntimeException("Venditore non trovato.ID non valido");
	}


	@Override
	public VenditoreDTO modificaPassword(int idvenditore, String newPass) {
		Optional<Venditore> opt = dao.findById(idvenditore);
		if (opt.isPresent()) {
			Venditore venditore = opt.get();
			venditore.setPassword(newPass);
			return Conversioni.daVenditoreAVenditoreDTO(venditore);
		} else {
			throw new RuntimeException("Password non modificata.Venditore non trovato");
		}
	}

	@Override
	public boolean aggiungiProdotto(int idVenditore, ProdottoDTO dto) {
	    Optional<Venditore> opt = dao.findById(idVenditore);
	    if (opt.isPresent()) {
	        Venditore venditore = opt.get();
	        for (Prodotto pro : venditore.getProdotti()) {
	            if (pro.getId() == dto.getId()) {
	                throw new RuntimeException("Prodotto gi√† esistente, ID non valido.");
	            }
	        }
	        Prodotto prodotto = Conversioni.daProdottoDTOAProdotto(dto);
	        venditore.getProdotti().add(prodotto);
	        return true;
	    } else {
	        throw new RuntimeException("Impossibile aggiungere il prodotto, Venditore non trovato.");
	    }
	}

	@Override
	public ProdottoDTO modificaQuantita(int idVenditore,int idProdotto, int quantita) {
		ProdottoDTO dto = null;
		Optional<Venditore> opt = dao.findById(idVenditore);
		if (opt.isPresent()) {
	        Venditore venditore = opt.get();
	        for(Prodotto prodotto : venditore.getProdotti()) {
	        	 if(prodotto.getId() == idProdotto) {
	 	        	prodotto.setQuantita(quantita);
	 	        	dto = Conversioni.daProdottoAProdottoDTO(prodotto);
	 	        	 return dto;
	 	        }
	 	      
	        } throw new RuntimeException("Prodotto non trovato,ID non valido.");
	        
	        
		}else {
			 throw new RuntimeException("Impossibile modificare la quantita del prodotto, Venditore non trovato.");
		}
	}

}
