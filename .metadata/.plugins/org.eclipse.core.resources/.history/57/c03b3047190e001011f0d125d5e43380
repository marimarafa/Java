package com.spring.phonebook.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spring.phonebook.dao.DaoRubrica;
import com.spring.phonebook.dto.ContattoDTO;
import com.spring.phonebook.dto.ContattoNoIdDTO;
import com.spring.phonebook.dto.RubricaDTO;
import com.spring.phonebook.dto.RubricaListaProprietariDTO;
import com.spring.phonebook.dto.RubricaPropietario_AnnoCreazioneDTO;
import com.spring.phonebook.entity.Contatto;
import com.spring.phonebook.entity.Rubrica;
import com.spring.phonebook.utility.Conversioni;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class ServiceRubricaImpl implements ServiceRubrica {

	@Autowired
	private DaoRubrica dao;
	
//	_____________________________________________________ service rubrica________________________________________________________________________________________________

	@Override
	public boolean creaRubrica(RubricaDTO dto) {
		Optional<Rubrica> opt = dao.findById(dto.getIdRubrica());
		if (opt.isPresent()) {
			return false;
		} else {
			Rubrica rubrica = Conversioni.daRubricaDtoARubrica(dto);
			dao.save(rubrica);
			return true;
		}
	}

	@Override
	public RubricaDTO cerca(int id) {
		Optional<Rubrica> opt = dao.findById(id);
		if (opt.isPresent()) {
			Rubrica rubrica = opt.get();
			return Conversioni.daRubricaARubricaDto(rubrica);
		}
		return null;
	}

	@Override
	public boolean aggiungiContatto(int idRubrica, ContattoDTO contatto) {
		Optional<Rubrica> opt = dao.findById(idRubrica);
		if (opt.isPresent()) {
			Rubrica rubrica = opt.get();
			rubrica.AggiungiContatto(Conversioni.daContattoDtoAContatto(contatto));
			return true;
		}
		return false;
	}

	@Override
	public List<RubricaDTO> visualizzaRubriche() {
		List<Rubrica> rubriche = dao.findAll();
		List<RubricaDTO> rubricheDTO = new ArrayList<>();
		for (Rubrica rubrica : rubriche) {
			rubricheDTO.add(Conversioni.daRubricaARubricaDto(rubrica));
		}
		return rubricheDTO;
	}

	@Override
	public boolean cancellaRubrica(int id) {
		Optional<Rubrica> opt = dao.findById(id);
		if (opt.isPresent()) {
			Rubrica rubrica = opt.get();
			dao.delete(rubrica);
			return true;
		} else {
			return false;
		}
	}
	
	public RubricaPropietario_AnnoCreazioneDTO visualizzaRubrica(int id) {
		Optional<Rubrica> opt = dao.findById(id);
		if (opt.isPresent()) {
			Rubrica rubrica = opt.get();
			RubricaDTO dto = Conversioni.daRubricaARubricaDto(rubrica);
			return new RubricaPropietario_AnnoCreazioneDTO(dto.getProprietario(), dto.getAnnoCreazione());
		} else {
			return null;
		}
	}

	public RubricaDTO ModificaProprietario(int id, String nuovoProprietario) {
		Rubrica rubrica = null;
		Optional<Rubrica> opt = dao.findById(id);
		if (opt.isPresent()) {
			rubrica = opt.get();
			rubrica.setProprietario(nuovoProprietario);
		}
		return Conversioni.daRubricaARubricaDto(rubrica);
	}

	public RubricaDTO ModificaAnnoCreazione(int id, int anno) {
		Rubrica rubrica = null;
		Optional<Rubrica> opt = dao.findById(id);
		if (opt.isPresent()) {
			rubrica = opt.get();
			rubrica.setAnnoCreazione(anno);
		}
		return Conversioni.daRubricaARubricaDto(rubrica);
	}

	public RubricaListaProprietariDTO VisualizzaProprietari() {
		List<String> propietariDTO = new ArrayList<String>();
		List<Rubrica> rubriche = dao.findAll();
		int numero_totale = 0;
		for (Rubrica rubrica : rubriche) {
			RubricaDTO dto = Conversioni.daRubricaARubricaDto(rubrica);
			propietariDTO.add(dto.getProprietario());
			numero_totale++;
		}
		return new RubricaListaProprietariDTO(propietariDTO, numero_totale);
	}

	public RubricaPropietario_AnnoCreazioneDTO RubricaPiuVecchia() {
		List<Rubrica> rubriche = dao.findAll();
		List<Integer> anni_creazioni = new ArrayList<Integer>();

		for (Rubrica rubrica : rubriche) {
			anni_creazioni.add(rubrica.getAnnoCreazione());
			int max = Collections.max(anni_creazioni);

			return new RubricaPropietario_AnnoCreazioneDTO(rubrica.getProprietario(), max);
		}
		return null;
	}

	public List<Integer> ListaAnniCreazione() {
		List<Integer> annicreazione = new ArrayList<Integer>();
		List<Rubrica> rubriche = dao.findAll();
		for (Rubrica rubrica : rubriche) {
			annicreazione.add(rubrica.getAnnoCreazione());
		}
		Collections.sort(annicreazione);
		return annicreazione;
	}

	public NumeroContattiDiRubricaDTO NumeroContattiInRubrica(int id) {
		Rubrica rubrica = dao.selectById(id);
		RubricaDTO dto = Conversioni.daRubricaARubricaDTO(rubrica);
		return new NumeroContattiDiRubricaDTO(dto.getProprietario(), dto.getContatti().size());
	}
	
		
	

//	@Override
//	public ContattoDTO modifica(int idRubrica, int id, ContattoDTO dto) {
//		Optional<Rubrica> opt = dao.findById(idRubrica);
//		ContattoDTO dtoo = new ContattoDTO();
//		if (opt.isPresent()) {
//			Rubrica rubrica = opt.get();
//			Contatto contatto = rubrica.getContatti().get(id);
//			if (contatto != null) {
//				contatto.setNome(dto.getNome());
//				contatto.setCognome(dto.getCognome());
//				contatto.setNumero(dto.getNumero());
//
//				rubrica.getContatti().add(contatto);
//				dtoo = Conversioni.daContattoAContattoDto(contatto);
//			} else {
//				return null;
//			}
//		}
//		return dtoo;
//	}
	
	

}
